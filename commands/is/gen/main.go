package main

import (
	"github.com/asaskevich/govalidator"
	"html/template"
	"log"
	"os"
	"sort"
)

//go:generate go run .
//go:generate go fmt ../sub.gen.go
const (
	genFile = "../sub.gen.go"
	tpl = `package is

// Code generated by is/gen; DO NOT EDIT."

import (
	"github.com/urfave/cli/v2"
    "stringthing/commands"
)

var (
	subCommands = []*cli.Command{
		{{range $subCommand := .}}{
			Name: "{{$subCommand}}", Action: doFormatAction,
			Flags: []cli.Flag{&cli.BoolFlag{Name: "verbose", Aliases: []string{"v"}, EnvVars: []string{commands.ENV_VERBOSE}}},
		},
		{{end}}
	}
)`
)

func main() {
	var tagList []string
	for k := range govalidator.TagMap {
		tagList = append(tagList, k)
	}

	sort.Strings(tagList)
	subCommandTpl, err := template.New("").Parse(tpl)
	if err != nil {
		log.Fatal(err)
	}

	outfile, fileErr := os.Create(genFile)
	if fileErr != nil {
		log.Fatal(fileErr)
	}

	defer func() {
		closeErr := outfile.Close()
		if closeErr != nil {
			log.Fatal(closeErr)
		}
	}()

	err = subCommandTpl.Execute(outfile, tagList)
	if err != nil {
		log.Fatal(err)
	}
}
